// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type BpfEvent struct {
	Pc   uint64
	Type uint8
	_    [7]byte
}

// LoadBpf returns the embedded CollectionSpec for Bpf.
func LoadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Bpf: %w", err)
	}

	return spec, err
}

// LoadBpfObjects loads Bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*BpfObjects
//	*BpfPrograms
//	*BpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// BpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfSpecs struct {
	BpfProgramSpecs
	BpfMapSpecs
}

// BpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfProgramSpecs struct {
	OffTcfClassify *ebpf.ProgramSpec `ebpf:"off_tcf_classify"`
	OnBpfHelper    *ebpf.ProgramSpec `ebpf:"on_bpf_helper"`
	OnEntry        *ebpf.ProgramSpec `ebpf:"on_entry"`
	OnExit         *ebpf.ProgramSpec `ebpf:"on_exit"`
	OnTcfClassify  *ebpf.ProgramSpec `ebpf:"on_tcf_classify"`
}

// BpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfMapSpecs struct {
	Bp2skb     *ebpf.MapSpec `ebpf:"bp2skb"`
	Events     *ebpf.MapSpec `ebpf:"events"`
	Skbmatched *ebpf.MapSpec `ebpf:"skbmatched"`
}

// BpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfObjects struct {
	BpfPrograms
	BpfMaps
}

func (o *BpfObjects) Close() error {
	return _BpfClose(
		&o.BpfPrograms,
		&o.BpfMaps,
	)
}

// BpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfMaps struct {
	Bp2skb     *ebpf.Map `ebpf:"bp2skb"`
	Events     *ebpf.Map `ebpf:"events"`
	Skbmatched *ebpf.Map `ebpf:"skbmatched"`
}

func (m *BpfMaps) Close() error {
	return _BpfClose(
		m.Bp2skb,
		m.Events,
		m.Skbmatched,
	)
}

// BpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfPrograms struct {
	OffTcfClassify *ebpf.Program `ebpf:"off_tcf_classify"`
	OnBpfHelper    *ebpf.Program `ebpf:"on_bpf_helper"`
	OnEntry        *ebpf.Program `ebpf:"on_entry"`
	OnExit         *ebpf.Program `ebpf:"on_exit"`
	OnTcfClassify  *ebpf.Program `ebpf:"on_tcf_classify"`
}

func (p *BpfPrograms) Close() error {
	return _BpfClose(
		p.OffTcfClassify,
		p.OnBpfHelper,
		p.OnEntry,
		p.OnExit,
		p.OnTcfClassify,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_bpfel_x86.o
var _BpfBytes []byte
